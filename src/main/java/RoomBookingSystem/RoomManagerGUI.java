package RoomBookingSystem;

import DataStructures.*;
import java.util.ArrayList;
import java.util.Observable;
import java.util.Observer;
import javax.swing.DefaultComboBoxModel;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.table.DefaultTableModel;

/**
 * Room Manager GUI
 *
 * @author Hamza
 */
public class RoomManagerGUI extends javax.swing.JFrame implements Runnable, Observer {

    private SharedData sharedData;
    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
    boolean updateTableForSpecificDay = false;

    public RoomManagerGUI(SharedData initialBookings) {
        super();
        sharedData = initialBookings;
        sharedData.addObserver(this);
        initComponents();
        updateSharedData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane4 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        btnAddRoom = new javax.swing.JButton();
        spinRoomSpaces = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        comboRoomType = new javax.swing.JComboBox<>();
        txtName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableRooms = new javax.swing.JTable();
        btnDeleteRoom = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableBookings = new javax.swing.JTable();
        btnDeleteBooking = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        btnAddTermDate = new javax.swing.JButton();
        SimpleDateFormat spinTermEndingModel = new SimpleDateFormat("dd/MM/yyyy");
        spinTermEnding = new javax.swing.JSpinner();
        jLabel9 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        SimpleDateFormat spinTermBeginningModel = new SimpleDateFormat("dd/MM/yyyy");
        spinTermBeginning = new javax.swing.JSpinner();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableTerms = new javax.swing.JTable();
        btnRemoveTerm = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        SimpleDateFormat spinDateModel = new SimpleDateFormat("dd/MM/yyyy");
        spinUnavailableFrom = new javax.swing.JSpinner();
        jLabel7 = new javax.swing.JLabel();
        SimpleDateFormat spinDateModel2 = new SimpleDateFormat("dd/MM/yyyy");
        spinUnavailableUntil = new javax.swing.JSpinner();
        btnAddUnavailability = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        tableUnavailability = new javax.swing.JTable();
        btnDeleteUnavailability = new javax.swing.JButton();
        txtReason = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        comboRoom = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        tableAvailability = new javax.swing.JTable();
        btnAllAvailabilitiesTwoWeeks = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        SimpleDateFormat spinDateModel3 = new SimpleDateFormat("dd/MM/yyyy");
        spinDateFilter = new javax.swing.JSpinner();
        jLabel13 = new javax.swing.JLabel();
        comboRoomType1 = new javax.swing.JComboBox<>();
        btnFindRooms = new javax.swing.JButton();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setMinimumSize(new java.awt.Dimension(830, 330));
        setSize(new java.awt.Dimension(830, 330));
        getContentPane().setLayout(null);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel1.setText("Room Manager");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(280, 10, 274, 44);

        btnAddRoom.setText("Add Room");
        btnAddRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddRoomActionPerformed(evt);
            }
        });

        spinRoomSpaces.setModel(new javax.swing.SpinnerNumberModel());

        jLabel4.setText("Spaces:");

        jLabel5.setText("Type:");

        comboRoomType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Computer Lab", "Tutorial Room", "Lecture Theatre" }));

        jLabel2.setText("Name:");

        tableRooms.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Space", "Type"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tableRooms);

        btnDeleteRoom.setText("Delete Selected Room");
        btnDeleteRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteRoomActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(spinRoomSpaces, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(comboRoomType, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(btnAddRoom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 531, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnDeleteRoom, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(184, 184, 184))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(24, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addComponent(jLabel2)
                            .addGap(66, 66, 66)
                            .addComponent(jLabel4))
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(30, 30, 30)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(comboRoomType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel5))
                            .addGap(13, 13, 13)
                            .addComponent(spinRoomSpaces, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(16, 16, 16)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddRoom)
                    .addComponent(btnDeleteRoom))
                .addGap(26, 26, 26))
        );

        jTabbedPane1.addTab("Rooms", jPanel2);

        tableBookings.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Room Name", "Date", "Time", "Booker Name", "Email", "Phone", "Notes"
            }
        ));
        jScrollPane1.setViewportView(tableBookings);

        btnDeleteBooking.setText("Delete Selected Booking");
        btnDeleteBooking.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteBookingActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 755, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnDeleteBooking)
                .addGap(309, 309, 309))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnDeleteBooking)
                .addGap(13, 13, 13))
        );

        jTabbedPane1.addTab("Bookings", jPanel1);

        btnAddTermDate.setText("Add Term Dates");
        btnAddTermDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddTermDateActionPerformed(evt);
            }
        });

        spinTermEnding.setModel(new javax.swing.SpinnerDateModel());
        spinTermEnding.setEditor(new javax.swing.JSpinner.DateEditor(spinTermEnding,spinTermEndingModel.toPattern()));

        jLabel9.setText("Term Ending:");

        jLabel8.setText("Term Beginning:");

        spinTermBeginning.setModel(new javax.swing.SpinnerDateModel());
        spinTermBeginning.setEditor(new javax.swing.JSpinner.DateEditor(spinTermBeginning,spinTermBeginningModel.toPattern()));

        tableTerms.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Term Beginning", "Term Ending"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tableTerms);

        btnRemoveTerm.setText("Remove Selected Term");
        btnRemoveTerm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveTermActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(spinTermBeginning, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE)
                            .addComponent(spinTermEnding)))
                    .addComponent(btnAddTermDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 514, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(166, 166, 166)
                        .addComponent(btnRemoveTerm, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(37, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnRemoveTerm)
                            .addComponent(btnAddTermDate)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(spinTermBeginning, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8))
                        .addGap(34, 34, 34)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(spinTermEnding, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9))
                        .addGap(50, 50, 50)))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Terms", jPanel3);

        jLabel6.setText("From:");

        spinUnavailableFrom.setModel(new javax.swing.SpinnerDateModel());
        spinUnavailableFrom.setEditor(new javax.swing.JSpinner.DateEditor(spinUnavailableFrom,spinDateModel.toPattern()));

        jLabel7.setText("Until:");

        spinUnavailableUntil.setModel(new javax.swing.SpinnerDateModel());
        spinUnavailableUntil.setEditor(new javax.swing.JSpinner.DateEditor(spinUnavailableUntil,spinDateModel2.toPattern()));

        btnAddUnavailability.setText("Add Unavailability");
        btnAddUnavailability.setToolTipText("");
        btnAddUnavailability.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddUnavailabilityActionPerformed(evt);
            }
        });

        tableUnavailability.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Room Name", "Unavailability Start", "Unavailability End", "Reason"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(tableUnavailability);

        btnDeleteUnavailability.setText("Delete Selected Unavailability");
        btnDeleteUnavailability.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteUnavailabilityActionPerformed(evt);
            }
        });

        jLabel3.setText("Reason:");

        jLabel10.setText("Room:");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(273, 273, 273)
                        .addComponent(btnDeleteUnavailability))
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 731, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel10))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(comboRoom, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtReason, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(spinUnavailableUntil, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(spinUnavailableFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(40, 40, 40)
                        .addComponent(btnAddUnavailability, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(78, 78, 78)))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnDeleteUnavailability)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(comboRoom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel10))
                            .addComponent(spinUnavailableFrom, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtReason, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel3))
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(spinUnavailableUntil, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel7))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(btnAddUnavailability)
                        .addGap(17, 17, 17)))
                .addGap(19, 19, 19))
        );

        jTabbedPane1.addTab("Mark Room as Unavailable", jPanel4);

        tableAvailability.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Date", "Time", "Spaces", "Type"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane6.setViewportView(tableAvailability);

        btnAllAvailabilitiesTwoWeeks.setText("Show All Available Rooms In The Next 2 Weeks");
        btnAllAvailabilitiesTwoWeeks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAllAvailabilitiesTwoWeeksActionPerformed(evt);
            }
        });

        jPanel6.setBackground(new java.awt.Color(229, 229, 229));

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel11.setText("Filter");

        jLabel12.setText("Room Booking Date:");

        spinDateFilter.setModel(new javax.swing.SpinnerDateModel());
        spinDateFilter.setEditor(new javax.swing.JSpinner.DateEditor(spinDateFilter,spinDateModel3.toPattern()));

        jLabel13.setText("Type:");

        comboRoomType1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Any", "COMPUTER_LAB", "TUTORIAL_ROOM", "LECTURE_THEATRE" }));

        btnFindRooms.setText("Find Rooms");
        btnFindRooms.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindRoomsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(364, 364, 364)
                .addComponent(jLabel11)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(45, Short.MAX_VALUE)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spinDateFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel13)
                .addGap(18, 18, 18)
                .addComponent(comboRoomType1, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnFindRooms)
                .addGap(23, 23, 23))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(spinDateFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13)
                    .addComponent(comboRoomType1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFindRooms))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 735, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(255, 255, 255)
                        .addComponent(btnAllAvailabilitiesTwoWeeks)))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAllAvailabilitiesTwoWeeks)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(13, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("View Availability", jPanel5);

        getContentPane().add(jTabbedPane1);
        jTabbedPane1.setBounds(20, 60, 780, 220);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddRoomActionPerformed
        //get details from inputs
        int spaces = Integer.parseInt(spinRoomSpaces.getValue().toString());
        int selectedIndex = comboRoomType.getSelectedIndex();
        String roomName = txtName.getText();
        //show msg if number of spaces isn't 1+
        if (spaces <= 0) {
            JOptionPane.showMessageDialog(null, "Room Not Added! Number of Spaces must be 1 or more!");
            return;
        }
        //make sure room name was entered
        if (roomName.trim().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Room Not Added! Room Name Must Be Entered!");
            return;
        }
        //make sure room name is unique
        if (!RoomManagerFunctions.isRoomNameUnique(sharedData.getTheRooms(), roomName)) {
            JOptionPane.showMessageDialog(null, "Room Not Added. Room with the same name already exists!");
            return;
        }
        TypeOfRoom roomType = (selectedIndex == 0) ? TypeOfRoom.COMPUTER_LAB : (selectedIndex == 1) ? TypeOfRoom.TUTORIAL_ROOM : (selectedIndex == 2) ? TypeOfRoom.LECTURE_THEATRE : null;
        //Add Room
        OneRoom newRoom = new OneRoom(roomName, roomType, spaces);
        sharedData.addRoom(newRoom);
        JOptionPane.showMessageDialog(null, "Room Added!");
        txtName.setText("");
    }//GEN-LAST:event_btnAddRoomActionPerformed

    private void btnAddTermDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddTermDateActionPerformed
        //get dates from input
        String textTermBeginning = ((JSpinner.DefaultEditor) spinTermBeginning.getEditor()).getTextField().getText();
        String textTermEnding = ((JSpinner.DefaultEditor) spinTermEnding.getEditor()).getTextField().getText();
        LocalDate termBeginningDate = LocalDate.parse(textTermBeginning, formatter);
        LocalDate termEndingDate = LocalDate.parse(textTermEnding, formatter);
        //ensure ending date is after start date
        if (termBeginningDate.isAfter(termEndingDate)) {
            JOptionPane.showMessageDialog(null, "Term Not Added. Ending Date Must Be After Beginning!");
            return;
        }
        //add term
        OneTerm newTerm = new OneTerm(termBeginningDate, termEndingDate);
        sharedData.addTerm(newTerm);
        JOptionPane.showMessageDialog(null, "Term Added!");

    }//GEN-LAST:event_btnAddTermDateActionPerformed

    private void btnDeleteRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteRoomActionPerformed
        //make sure a row has been selected
        int row = tableRooms.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(null, "Booking Not Removed! A Booking Date/Time Must Be Selected!");
            return;
        }
        String roomName = tableRooms.getModel().getValueAt(row, 0).toString();
        //remove from the list
        sharedData.removeRoom(roomName);
        JOptionPane.showMessageDialog(null, "Room Removed!");
    }//GEN-LAST:event_btnDeleteRoomActionPerformed

    private void btnRemoveTermActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveTermActionPerformed
        //make sure a row has been selected
        int row = tableTerms.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(null, "Term Not Removed! A Term Must Be Selected!");
            return;
        }
        //get data from inputs
        LocalDate termBeginning = LocalDate.parse(tableTerms.getModel().getValueAt(row, 0).toString(), formatter);
        LocalDate termEnding = LocalDate.parse(tableTerms.getModel().getValueAt(row, 1).toString(), formatter);
        //remove selected term
        sharedData.removeTerm(termBeginning, termEnding);
        JOptionPane.showMessageDialog(null, "Term Removed!");


    }//GEN-LAST:event_btnRemoveTermActionPerformed

    private void btnDeleteBookingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteBookingActionPerformed
        int row = tableBookings.getSelectedRow();
        //make sure a row has been selected
        if (row == -1) {
            JOptionPane.showMessageDialog(null, "Booking Not Removed! A Booking Must Be Selected!");
            return;
        }
        //get data from inputs
        String roomName = tableBookings.getModel().getValueAt(row, 0).toString();
        LocalDate bookingDate = LocalDate.parse(tableBookings.getModel().getValueAt(row, 1).toString(), formatter);
        String time = tableBookings.getModel().getValueAt(row, 2).toString();
        TimeOfDay bookingTime = (time.equals("MORNING")) ? TimeOfDay.MORNING : (time.equals("AFTERNOON")) ? TimeOfDay.AFTERNOON : (time.equals("EVENING")) ? TimeOfDay.EVENING : null;
        //remove selected booking
        sharedData.removeBooking(roomName, bookingDate, bookingTime);
        JOptionPane.showMessageDialog(null, "Booking Removed!");

    }//GEN-LAST:event_btnDeleteBookingActionPerformed

    private void btnDeleteUnavailabilityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteUnavailabilityActionPerformed
        int row = tableUnavailability.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(null, "Unavailability Not Removed! An Unavailability Must Be Selected!");
            return;
        }
        //get data from inputs
        String roomName = tableUnavailability.getModel().getValueAt(row, 0).toString();
        LocalDate unavailStart = LocalDate.parse(tableUnavailability.getModel().getValueAt(row, 1).toString(), formatter);
        LocalDate unavailEnd = LocalDate.parse(tableUnavailability.getModel().getValueAt(row, 2).toString(), formatter);
        //remove selected unavailability
        sharedData.removeUnavailability(roomName, unavailStart, unavailEnd);
        JOptionPane.showMessageDialog(null, "Unavailability Removed!");

    }//GEN-LAST:event_btnDeleteUnavailabilityActionPerformed

    private void btnAddUnavailabilityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddUnavailabilityActionPerformed
        int row = comboRoom.getSelectedIndex();
        //ensure a room is selected
        if (row == -1) {
            JOptionPane.showMessageDialog(null, "Unavailability Not Added. Room Must Be Selected!");
            return;
        }
        //get data from inputs
        String textUnavailStarting = ((JSpinner.DefaultEditor) spinUnavailableFrom.getEditor()).getTextField().getText();
        String textUnavailEnding = ((JSpinner.DefaultEditor) spinUnavailableUntil.getEditor()).getTextField().getText();
        String roomName = comboRoom.getSelectedItem().toString();
        LocalDate unavailStartingDate = LocalDate.parse(textUnavailStarting, formatter);
        LocalDate unavailEndingDate = LocalDate.parse(textUnavailEnding, formatter);
        //ensure ending date is after starting date
        if (unavailStartingDate.isAfter(unavailEndingDate)) {
            JOptionPane.showMessageDialog(null, "Unavailability Not Added. Ending Date Must Be After Beginning!");
            return;
        }
        //add new unavailabilityRoomManagerFunctions.getRoomFromName(sharedData.getTheRooms(),
        OneUnavailability newUnavail = new OneUnavailability(roomName, unavailStartingDate, unavailEndingDate, txtReason.getText());
        sharedData.addUnavailability(newUnavail);
        JOptionPane.showMessageDialog(null, "Unavailability Added!");
        txtReason.setText("");
    }//GEN-LAST:event_btnAddUnavailabilityActionPerformed

    private void btnAllAvailabilitiesTwoWeeksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAllAvailabilitiesTwoWeeksActionPerformed
        updateTableForSpecificDay = false;
        updateSharedData();
    }//GEN-LAST:event_btnAllAvailabilitiesTwoWeeksActionPerformed

    private void btnFindRoomsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindRoomsActionPerformed

        updateTableForSpecificDay = true;
        //get text from spinner and convert into LocalDate
        String textDateFilter = ((JSpinner.DefaultEditor) spinDateFilter.getEditor()).getTextField().getText();
        LocalDate dateFilter = LocalDate.parse(textDateFilter, formatter);

        //make sure date isn't in the past
        if (dateFilter.isBefore(LocalDate.now())) {
            JOptionPane.showMessageDialog(null, "Selected date is in the past. Please enter a valid date.");
            return;
        }
        //call function to find available rooms and add into table
        updateSharedData();
        //show message
        if (tableAvailability.getModel().getRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "Sorry, no available rooms found on the entered date. Please try another date.");
        } else {
            JOptionPane.showMessageDialog(null, "Available rooms found!");
        }
    }//GEN-LAST:event_btnFindRoomsActionPerformed

    @Override
    public void run() {
        this.setVisible(true);
    }

    @Override
    public void update(Observable o, Object arg) {
        updateSharedData();
    }

    public void updateSharedData() {
        //update screen when change is made to a list
        addRoomsToTable();
        addBookingsToTable();
        addTermsToTable();
        addUnavailabilitiesToTable();
        String textDateFilter = ((JSpinner.DefaultEditor) spinDateFilter.getEditor()).getTextField().getText();
        DefaultTableModel model = (DefaultTableModel) tableAvailability.getModel();
        model.setRowCount(0);
        ArrayList<OneAvailableRoom> availableRooms = null;
        if (updateTableForSpecificDay) {
            availableRooms = RoomBookingFunctions.getAvailableBookingsOnDay(sharedData.getTheBookings(), sharedData.getTheRooms(), sharedData.getTheTerms(), sharedData.getTheUnavailabilities(), textDateFilter, comboRoomType1.getSelectedItem().toString());
        } else {
            availableRooms = RoomBookingFunctions.getAvailableBookingsWithinAFortnight(sharedData.getTheBookings(), sharedData.getTheRooms(), sharedData.getTheTerms(), sharedData.getTheUnavailabilities());
        }
        //populate table with available rooms
        for (OneAvailableRoom availRoom : availableRooms) {
            model.addRow(new Object[]{availRoom.getRoom().getRoomName(), availRoom.getDate().format(formatter), availRoom.getDayTime(), availRoom.getRoom().getSpaces(), availRoom.getRoom().getTypeOfRoom()});
        }
    }

    public void addRoomsToTable() {
        //clear elements and add all rooms to the table and combo box
        ArrayList<OneRoom> rooms = sharedData.getTheRooms();
        DefaultTableModel model = (DefaultTableModel) tableRooms.getModel();
        DefaultComboBoxModel<String> comboModel = (DefaultComboBoxModel) comboRoom.getModel();
        comboModel.removeAllElements();
        model.setRowCount(0);
        for (OneRoom room : rooms) {
            model.addRow(new Object[]{room.getRoomName(), room.getSpaces(), room.getTypeOfRoom()});
            comboModel.addElement(room.getRoomName());
        }
    }

    public void addBookingsToTable() {
        //clear elements and add all bookings to the table
        ArrayList<OneBooking> bookings = sharedData.getTheBookings();
        DefaultTableModel model = (DefaultTableModel) tableBookings.getModel();
        model.setRowCount(0);
        for (OneBooking booking : bookings) {
            model.addRow(new Object[]{booking.getRoomName(), booking.getBookingDate().format(formatter), booking.getBookingTime().toString(), booking.getBookerName(), booking.getBookerEmail(), booking.getBookerPhone(), booking.getBookingNotes()});
        }
    }

    public void addTermsToTable() {
        //clear elements and add all terms to the table
        ArrayList<OneTerm> terms = sharedData.getTheTerms();
        DefaultTableModel model = (DefaultTableModel) tableTerms.getModel();
        model.setRowCount(0);
        for (OneTerm term : terms) {
            model.addRow(new Object[]{term.getTermBeginning().format(formatter), term.getTermEnding().format(formatter)});
        }
    }

    public void addUnavailabilitiesToTable() {
        //clear elements and add all unavailabilities to the table
        ArrayList<OneUnavailability> unavailabilities = sharedData.getTheUnavailabilities();
        DefaultTableModel model = (DefaultTableModel) tableUnavailability.getModel();
        model.setRowCount(0);
        for (OneUnavailability unavail : unavailabilities) {
            model.addRow(new Object[]{unavail.getRoomName(), unavail.returnUnavailStart().format(formatter), unavail.returnUnavailEnd().format(formatter), unavail.returnReason()});
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddRoom;
    private javax.swing.JButton btnAddTermDate;
    private javax.swing.JButton btnAddUnavailability;
    private javax.swing.JButton btnAllAvailabilitiesTwoWeeks;
    private javax.swing.JButton btnDeleteBooking;
    private javax.swing.JButton btnDeleteRoom;
    private javax.swing.JButton btnDeleteUnavailability;
    private javax.swing.JButton btnFindRooms;
    private javax.swing.JButton btnRemoveTerm;
    private javax.swing.JComboBox<String> comboRoom;
    private javax.swing.JComboBox<String> comboRoomType;
    private javax.swing.JComboBox<String> comboRoomType1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JSpinner spinDateFilter;
    private javax.swing.JSpinner spinRoomSpaces;
    private javax.swing.JSpinner spinTermBeginning;
    private javax.swing.JSpinner spinTermEnding;
    private javax.swing.JSpinner spinUnavailableFrom;
    private javax.swing.JSpinner spinUnavailableUntil;
    private javax.swing.JTable tableAvailability;
    private javax.swing.JTable tableBookings;
    private javax.swing.JTable tableRooms;
    private javax.swing.JTable tableTerms;
    private javax.swing.JTable tableUnavailability;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtReason;
    // End of variables declaration//GEN-END:variables

}
