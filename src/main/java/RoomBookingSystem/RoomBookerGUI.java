/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package RoomBookingSystem;

import java.time.LocalDate;
import java.util.Observable;
import java.util.Observer;
import javax.swing.JOptionPane;
import java.text.SimpleDateFormat;
import java.time.DayOfWeek;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import javax.swing.JSpinner;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Hamza
 */
public class RoomBookerGUI extends javax.swing.JFrame implements Runnable, Observer {

    private SharedData sharedData;

    /**
     * Creates new form RoomBookerGUI
     */
    public RoomBookerGUI(SharedData initialBookings) {
        super();
        sharedData = initialBookings;
        sharedData.addObserver(this);
        initComponents();
        updateSharedData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableAvailability = new javax.swing.JTable();
        SimpleDateFormat spinDateModel = new SimpleDateFormat("dd/MM/yyyy");
        spinDateFilter = new javax.swing.JSpinner();
        jLabel3 = new javax.swing.JLabel();
        btnFindRooms = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtPhone = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtNotes = new javax.swing.JTextField();
        btnBookSelectedRoom = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel1.setText("Room Booker");

        tableAvailability.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Date", "Time", "Spaces", "Type"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableAvailability);

        spinDateFilter.setModel(new javax.swing.SpinnerDateModel());
        spinDateFilter.setEditor(new javax.swing.JSpinner.DateEditor(spinDateFilter,spinDateModel.toPattern()));

        jLabel3.setText("Room Booking Date");

        btnFindRooms.setText("Find Rooms");
        btnFindRooms.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindRoomsActionPerformed(evt);
            }
        });

        jLabel4.setText("Name:");

        jLabel5.setText("Email:");

        jLabel6.setText("Phone:");

        jLabel7.setText("Notes:");

        btnBookSelectedRoom.setText("Book Selected Room");
        btnBookSelectedRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBookSelectedRoomActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5))
                                .addGap(30, 30, 30)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtName, javax.swing.GroupLayout.DEFAULT_SIZE, 306, Short.MAX_VALUE)
                                    .addComponent(txtEmail))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel7))
                                .addGap(30, 30, 30)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtPhone, javax.swing.GroupLayout.DEFAULT_SIZE, 311, Short.MAX_VALUE)
                                    .addComponent(txtNotes)))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(148, 148, 148)
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(spinDateFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(44, 44, 44)
                                .addComponent(btnFindRooms))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(287, 287, 287)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(343, 343, 343)
                                .addComponent(btnBookSelectedRoom)))
                        .addGap(0, 193, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel1)
                .addGap(33, 33, 33)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spinDateFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(btnFindRooms))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(txtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(txtNotes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnBookSelectedRoom)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBookSelectedRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBookSelectedRoomActionPerformed
        //validation
        int row = tableAvailability.getSelectedRow();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
        if (row != -1) {
            String roomName = tableAvailability.getModel().getValueAt(row, 0).toString();
            LocalDate bookingDate = LocalDate.parse(tableAvailability.getModel().getValueAt(row, 1).toString(), formatter);
            String time = tableAvailability.getModel().getValueAt(row, 2).toString();
            TimeOfDay bookingTime = (time.equals("MORNING")) ? TimeOfDay.MORNING : (time.equals("AFTERNOON")) ? TimeOfDay.AFTERNOON : (time.equals("EVENING")) ? TimeOfDay.EVENING : null;
            String bookerName = txtName.getText();
            String bookerEmail = txtEmail.getText();
            String bookerPhone = txtPhone.getText();
            String bookingNotes = txtNotes.getText();
            if (!doesBookingExist(roomName, bookingDate, bookingTime)) {
                OneBooking newBooking = new OneBooking(getRoomFromName(roomName), bookerName, bookerEmail, bookerPhone, bookingNotes, bookingDate, bookingTime);
                sharedData.addBooking(newBooking);
                JOptionPane.showMessageDialog(null, "Booking Added!");
            } else {
                JOptionPane.showMessageDialog(null, "Booking Not Added! Someone already booked this!");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Booking Not Added! A Booking Date/Time Must Be Selected!");
        }
    }//GEN-LAST:event_btnBookSelectedRoomActionPerformed

    private OneRoom getRoomFromName(String name) {
        ArrayList<OneRoom> rooms = sharedData.getTheRooms();
        for (OneRoom room : rooms) {
            if (room.getRoomName().equals(name)) {
                return room;
            }
        }
        return null;
    }

    public boolean doesBookingExist(String roomName, LocalDate bookingDate, TimeOfDay bookingTime) {
        ArrayList<OneBooking> bookings = sharedData.getTheBookings();
        for (OneBooking booking : bookings) {
            if (booking.getRoom().getRoomName().equals(roomName) && booking.getBookingDate().isEqual(bookingDate) && (booking.getBookingTime().equals(bookingTime))) {
                return true;
            }
        }
        return false;
    }


    private void btnFindRoomsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindRoomsActionPerformed
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
        String textDateFilter = ((JSpinner.DefaultEditor) spinDateFilter.getEditor()).getTextField().getText();
        LocalDate dateFilter = LocalDate.parse(textDateFilter, formatter);
        if (dateFilter.isBefore(LocalDate.now())) {
            JOptionPane.showMessageDialog(null, "Selected date is in the past. Please enter a valid date.");
            return;
        }
        findRoomAvailability();
        if (tableAvailability.getModel().getRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "Sorry, no available rooms found on the entered date. Please try another date.");
        } else {
            JOptionPane.showMessageDialog(null, "Available rooms found!");
        }
    }//GEN-LAST:event_btnFindRoomsActionPerformed

    private void findRoomAvailability() {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
        String textDateFilter = ((JSpinner.DefaultEditor) spinDateFilter.getEditor()).getTextField().getText();
        LocalDate dateFilter = LocalDate.parse(textDateFilter, formatter);
        DefaultTableModel model = (DefaultTableModel) tableAvailability.getModel();
        ArrayList<AvailableRoom> availableRooms = getAvailableBookingsOnDay(dateFilter);
        model.setRowCount(0);
        for (AvailableRoom availRoom : availableRooms) {
            model.addRow(new Object[]{availRoom.getRoom().getRoomName(), textDateFilter, availRoom.getDayTime(), availRoom.getRoom().getSpaces(), availRoom.getRoom().getTypeOfRoom()});
        }
    }

    private ArrayList<AvailableRoom> getAvailableBookingsOnDay(LocalDate date) {
        ArrayList<OneBooking> bookings = sharedData.getTheBookings();
        ArrayList<OneRoom> rooms = sharedData.getTheRooms();
        ArrayList<AvailableRoom> availableRooms = new ArrayList<AvailableRoom>();
        ArrayList<TimeOfDay> times = new ArrayList<TimeOfDay>();
        if (date.getDayOfWeek() == DayOfWeek.SATURDAY || date.getDayOfWeek() == DayOfWeek.SUNDAY) {

            times.add(TimeOfDay.MORNING);
            times.add(TimeOfDay.AFTERNOON);
            times.add(TimeOfDay.EVENING);

        } else {
            boolean dateWithinTerm = isDateWithinTerm(date);

            if (dateWithinTerm) {
                //open evenings only on weekdays
                times.add(TimeOfDay.EVENING);
            } else {
                times.add(TimeOfDay.MORNING);
                times.add(TimeOfDay.AFTERNOON);
                times.add(TimeOfDay.EVENING);
            }
        }

        for (OneRoom room : rooms) {
            for (TimeOfDay time : times) {
                if (!doesBookingExist(room.getRoomName(), date, time)) {
                    AvailableRoom availRoom = new AvailableRoom(time, getRoomFromName(room.getRoomName()));
                    availableRooms.add(availRoom);
                }
            }
        }
        return availableRooms;
    }

    public boolean isDateWithinTerm(LocalDate date) {
        ArrayList<OneTerm> terms = sharedData.getTheTerms();
        boolean dateWithinTerm = false;

        for (OneTerm term : terms) {
            if ((date.isAfter(term.getTermBeginning()) && date.isBefore(term.getTermEnding())) || (date.isEqual(term.getTermBeginning())) || (date.isEqual(term.getTermEnding()))) {
                dateWithinTerm = true;
            }
        }

        return dateWithinTerm;
    }

    @Override
    public void run() {
        this.setVisible(true);
    }

    @Override
    public void update(Observable o, Object arg) {
        updateSharedData();
    }

    public void updateSharedData() {
        findRoomAvailability();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBookSelectedRoom;
    private javax.swing.JButton btnFindRooms;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner spinDateFilter;
    private javax.swing.JTable tableAvailability;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtNotes;
    private javax.swing.JTextField txtPhone;
    // End of variables declaration//GEN-END:variables

}

class AvailableRoom {

    private TimeOfDay DayTime;
    private OneRoom Room;

    public AvailableRoom(TimeOfDay dayTime, OneRoom room) {
        DayTime = dayTime;
        Room = room;
    }

    public TimeOfDay getDayTime() {
        return DayTime;
    }

    public OneRoom getRoom() {
        return Room;
    }

}
